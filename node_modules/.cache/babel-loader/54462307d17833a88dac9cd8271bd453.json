{"ast":null,"code":"var _jsxFileName = \"/Users/nanye/Desktop/crwn-clothing-v2-graphql/src/routes/category/category.component.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState, useEffect, Fragment } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ProductCard from '../../components/product-card/product-card.component'; // import { CategoriesContext } from '../../contexts/categories.context';\n\nimport { CategoryContainer, Title } from './category.styles';\nimport Spinner from '../../components/spinner/spinner.component';\nimport { gql, useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_CATEGORY = gql`\n  query($title: String!) {\n    getCollectionsByTitle(title:$title){\n      id,\n      title,\n      items{\n        id,\n        name,\n        price,\n        imageUrl\n      }\n    }\n  }\n`;\n\nconst Category = () => {\n  _s();\n\n  const {\n    category\n  } = useParams(); // const { categoriesMap, loading } = useContext(CategoriesContext);\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_CATEGORY, {\n    variables: {\n      title: category\n    }\n  });\n  console.log(\"data: \", data); // useEffect(() => {\n  //   setProducts(categoriesMap[category]);\n  // }, [category, categoriesMap]);\n\n  useEffect(() => {\n    if (data) {\n      const {\n        getCollectionsByTitle: {\n          items\n        }\n      } = data;\n      setProducts(items);\n    }\n  }, [category, data]); // const [products, setProducts] = useState(categoriesMap[category]);\n\n  const [products, setProducts] = useState([]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 18\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: category.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CategoryContainer, {\n        children: products && products.map(product => /*#__PURE__*/_jsxDEV(ProductCard, {\n          product: product\n        }, product.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Category, \"M14HkCvnwtW2QzhnHmYfnV8mqZM=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = Category;\nexport default Category;\n\nvar _c;\n\n$RefreshReg$(_c, \"Category\");","map":{"version":3,"sources":["/Users/nanye/Desktop/crwn-clothing-v2-graphql/src/routes/category/category.component.jsx"],"names":["useContext","useState","useEffect","Fragment","useParams","ProductCard","CategoryContainer","Title","Spinner","gql","useQuery","GET_CATEGORY","Category","category","loading","error","data","variables","title","console","log","getCollectionsByTitle","items","setProducts","products","toUpperCase","map","product","id"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,WAAP,MAAwB,sDAAxB,C,CACA;;AACA,SAASC,iBAAT,EAA4BC,KAA5B,QAAyC,mBAAzC;AACA,OAAOC,OAAP,MAAoB,4CAApB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;AAEA,MAAMC,YAAY,GAAGF,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeA,MAAMG,QAAQ,GAAG,MAAM;AAAA;;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAeT,SAAS,EAA9B,CADqB,CAGrB;;AACA,QAAM;AAAEU,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BN,QAAQ,CAACC,YAAD,EAAe;AACtDM,IAAAA,SAAS,EAAC;AACRC,MAAAA,KAAK,EAAEL;AADC;AAD4C,GAAf,CAAzC;AAMAM,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBJ,IAAtB,EAVqB,CAYrB;AACA;AACA;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGc,IAAH,EAAQ;AACN,YAAK;AACHK,QAAAA,qBAAqB,EAAE;AAACC,UAAAA;AAAD;AADpB,UAEDN,IAFJ;AAIAO,MAAAA,WAAW,CAACD,KAAD,CAAX;AACD;AACF,GARQ,EAQN,CAACT,QAAD,EAAWG,IAAX,CARM,CAAT,CAfqB,CAyBrB;;AACA,QAAM,CAACQ,QAAD,EAAWD,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAxC;AAGA,sBACE,QAAC,QAAD;AAAA,cACGa,OAAO,gBAAG,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAEN,QAAC,QAAD;AAAA,8BACE,QAAC,KAAD;AAAA,kBAAQD,QAAQ,CAACY,WAAT;AAAR;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,iBAAD;AAAA,kBACGD,QAAQ,IACPA,QAAQ,CAACE,GAAT,CAAcC,OAAD,iBACX,QAAC,WAAD;AAA8B,UAAA,OAAO,EAAEA;AAAvC,WAAkBA,OAAO,CAACC,EAA1B;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA7CD;;GAAMhB,Q;UACiBR,S,EAGYM,Q;;;KAJ7BE,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import { useContext, useState, useEffect, Fragment } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ProductCard from '../../components/product-card/product-card.component';\n// import { CategoriesContext } from '../../contexts/categories.context';\nimport { CategoryContainer, Title } from './category.styles';\nimport Spinner from '../../components/spinner/spinner.component';\nimport { gql, useQuery } from '@apollo/client';\n\nconst GET_CATEGORY = gql`\n  query($title: String!) {\n    getCollectionsByTitle(title:$title){\n      id,\n      title,\n      items{\n        id,\n        name,\n        price,\n        imageUrl\n      }\n    }\n  }\n`\n\nconst Category = () => {\n  const { category } = useParams();\n\n  // const { categoriesMap, loading } = useContext(CategoriesContext);\n  const { loading, error, data } = useQuery(GET_CATEGORY, {\n    variables:{\n      title: category,\n    },\n  });\n\n  console.log(\"data: \", data);\n\n  // useEffect(() => {\n  //   setProducts(categoriesMap[category]);\n  // }, [category, categoriesMap]);\n  useEffect(() => {\n    if(data){\n      const{\n        getCollectionsByTitle: {items},\n      } = data;\n\n      setProducts(items);\n    }\n  }, [category, data]);\n\n  // const [products, setProducts] = useState(categoriesMap[category]);\n  const [products, setProducts] = useState([]);\n\n\n  return (\n    <Fragment>\n      {loading ? <Spinner /> :\n      (    \n        <Fragment>\n          <Title>{category.toUpperCase()}</Title>\n          <CategoryContainer>\n            {products &&\n              products.map((product) => (\n                <ProductCard key={product.id} product={product} />\n            ))}\n          </CategoryContainer>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Category;\n"]},"metadata":{},"sourceType":"module"}